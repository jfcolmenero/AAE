#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLAuthorizationRepository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AUTHDB")]
	public partial class AUTHDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAUTH_Authorization(AUTH_Authorization instance);
    partial void UpdateAUTH_Authorization(AUTH_Authorization instance);
    partial void DeleteAUTH_Authorization(AUTH_Authorization instance);
    partial void InsertAUTH_UsersMasterRecord(AUTH_UsersMasterRecord instance);
    partial void UpdateAUTH_UsersMasterRecord(AUTH_UsersMasterRecord instance);
    partial void DeleteAUTH_UsersMasterRecord(AUTH_UsersMasterRecord instance);
    partial void InsertAUTH_AuthorizationGroup(AUTH_AuthorizationGroup instance);
    partial void UpdateAUTH_AuthorizationGroup(AUTH_AuthorizationGroup instance);
    partial void DeleteAUTH_AuthorizationGroup(AUTH_AuthorizationGroup instance);
    partial void InsertAUTH_AuthorizationObject(AUTH_AuthorizationObject instance);
    partial void UpdateAUTH_AuthorizationObject(AUTH_AuthorizationObject instance);
    partial void DeleteAUTH_AuthorizationObject(AUTH_AuthorizationObject instance);
    partial void InsertAUTH_Field(AUTH_Field instance);
    partial void UpdateAUTH_Field(AUTH_Field instance);
    partial void DeleteAUTH_Field(AUTH_Field instance);
    partial void InsertAUTH_Profile(AUTH_Profile instance);
    partial void UpdateAUTH_Profile(AUTH_Profile instance);
    partial void DeleteAUTH_Profile(AUTH_Profile instance);
    partial void InsertAUTH_ProfilesContent(AUTH_ProfilesContent instance);
    partial void UpdateAUTH_ProfilesContent(AUTH_ProfilesContent instance);
    partial void DeleteAUTH_ProfilesContent(AUTH_ProfilesContent instance);
    #endregion
		
		public AUTHDBDataContext() : 
				base(global::SQLAuthorizationRepository.Properties.Settings.Default.AUTHDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AUTHDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AUTHDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AUTHDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AUTHDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AUTH_Authorization> AUTH_Authorizations
		{
			get
			{
				return this.GetTable<AUTH_Authorization>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_UsersMasterRecord> AUTH_UsersMasterRecords
		{
			get
			{
				return this.GetTable<AUTH_UsersMasterRecord>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_AuthorizationGroup> AUTH_AuthorizationGroups
		{
			get
			{
				return this.GetTable<AUTH_AuthorizationGroup>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_AuthorizationObject> AUTH_AuthorizationObjects
		{
			get
			{
				return this.GetTable<AUTH_AuthorizationObject>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_Field> AUTH_Fields
		{
			get
			{
				return this.GetTable<AUTH_Field>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_Profile> AUTH_Profiles
		{
			get
			{
				return this.GetTable<AUTH_Profile>();
			}
		}
		
		public System.Data.Linq.Table<AUTH_ProfilesContent> AUTH_ProfilesContents
		{
			get
			{
				return this.GetTable<AUTH_ProfilesContent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_Authorization")]
	public partial class AUTH_Authorization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AuthorizationId;
		
		private string _AuthorizationObjectId;
		
		private string _ValueList;
		
		private string _Hash;
		
		private EntitySet<AUTH_ProfilesContent> _AUTH_ProfilesContents;
		
		private EntityRef<AUTH_AuthorizationObject> _AUTH_AuthorizationObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationIdChanging(System.Guid value);
    partial void OnAuthorizationIdChanged();
    partial void OnAuthorizationObjectIdChanging(string value);
    partial void OnAuthorizationObjectIdChanged();
    partial void OnValueListChanging(string value);
    partial void OnValueListChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    #endregion
		
		public AUTH_Authorization()
		{
			this._AUTH_ProfilesContents = new EntitySet<AUTH_ProfilesContent>(new Action<AUTH_ProfilesContent>(this.attach_AUTH_ProfilesContents), new Action<AUTH_ProfilesContent>(this.detach_AUTH_ProfilesContents));
			this._AUTH_AuthorizationObject = default(EntityRef<AUTH_AuthorizationObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this.OnAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationId = value;
					this.SendPropertyChanged("AuthorizationId");
					this.OnAuthorizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationObjectId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorizationObjectId
		{
			get
			{
				return this._AuthorizationObjectId;
			}
			set
			{
				if ((this._AuthorizationObjectId != value))
				{
					if (this._AUTH_AuthorizationObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorizationObjectIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationObjectId = value;
					this.SendPropertyChanged("AuthorizationObjectId");
					this.OnAuthorizationObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueList", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ValueList
		{
			get
			{
				return this._ValueList;
			}
			set
			{
				if ((this._ValueList != value))
				{
					this.OnValueListChanging(value);
					this.SendPropertyChanging();
					this._ValueList = value;
					this.SendPropertyChanged("ValueList");
					this.OnValueListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="NVarChar(44) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_Authorization_AUTH_ProfilesContent", Storage="_AUTH_ProfilesContents", ThisKey="AuthorizationId", OtherKey="AuthorizationId")]
		public EntitySet<AUTH_ProfilesContent> AUTH_ProfilesContents
		{
			get
			{
				return this._AUTH_ProfilesContents;
			}
			set
			{
				this._AUTH_ProfilesContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_AuthorizationObject_AUTH_Authorization", Storage="_AUTH_AuthorizationObject", ThisKey="AuthorizationObjectId", OtherKey="AuthorizationObjectId", IsForeignKey=true)]
		public AUTH_AuthorizationObject AUTH_AuthorizationObject
		{
			get
			{
				return this._AUTH_AuthorizationObject.Entity;
			}
			set
			{
				AUTH_AuthorizationObject previousValue = this._AUTH_AuthorizationObject.Entity;
				if (((previousValue != value) 
							|| (this._AUTH_AuthorizationObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTH_AuthorizationObject.Entity = null;
						previousValue.AUTH_Authorizations.Remove(this);
					}
					this._AUTH_AuthorizationObject.Entity = value;
					if ((value != null))
					{
						value.AUTH_Authorizations.Add(this);
						this._AuthorizationObjectId = value.AuthorizationObjectId;
					}
					else
					{
						this._AuthorizationObjectId = default(string);
					}
					this.SendPropertyChanged("AUTH_AuthorizationObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AUTH_ProfilesContents(AUTH_ProfilesContent entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_Authorization = this;
		}
		
		private void detach_AUTH_ProfilesContents(AUTH_ProfilesContent entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_Authorization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_UsersMasterRecord")]
	public partial class AUTH_UsersMasterRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HashCode;
		
		private string _UserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHashCodeChanging(string value);
    partial void OnHashCodeChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AUTH_UsersMasterRecord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HashCode", DbType="NVarChar(44) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HashCode
		{
			get
			{
				return this._HashCode;
			}
			set
			{
				if ((this._HashCode != value))
				{
					this.OnHashCodeChanging(value);
					this.SendPropertyChanging();
					this._HashCode = value;
					this.SendPropertyChanged("HashCode");
					this.OnHashCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_AuthorizationGroup")]
	public partial class AUTH_AuthorizationGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AuthorizationObjectGroupId;
		
		private EntitySet<AUTH_AuthorizationObject> _AUTH_AuthorizationObjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationObjectGroupIdChanging(string value);
    partial void OnAuthorizationObjectGroupIdChanged();
    #endregion
		
		public AUTH_AuthorizationGroup()
		{
			this._AUTH_AuthorizationObjects = new EntitySet<AUTH_AuthorizationObject>(new Action<AUTH_AuthorizationObject>(this.attach_AUTH_AuthorizationObjects), new Action<AUTH_AuthorizationObject>(this.detach_AUTH_AuthorizationObjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationObjectGroupId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AuthorizationObjectGroupId
		{
			get
			{
				return this._AuthorizationObjectGroupId;
			}
			set
			{
				if ((this._AuthorizationObjectGroupId != value))
				{
					this.OnAuthorizationObjectGroupIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationObjectGroupId = value;
					this.SendPropertyChanged("AuthorizationObjectGroupId");
					this.OnAuthorizationObjectGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_AuthorizationGroup_AUTH_AuthorizationObject", Storage="_AUTH_AuthorizationObjects", ThisKey="AuthorizationObjectGroupId", OtherKey="AuthorizationObjectGroupId")]
		public EntitySet<AUTH_AuthorizationObject> AUTH_AuthorizationObjects
		{
			get
			{
				return this._AUTH_AuthorizationObjects;
			}
			set
			{
				this._AUTH_AuthorizationObjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AUTH_AuthorizationObjects(AUTH_AuthorizationObject entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_AuthorizationGroup = this;
		}
		
		private void detach_AUTH_AuthorizationObjects(AUTH_AuthorizationObject entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_AuthorizationGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_AuthorizationObject")]
	public partial class AUTH_AuthorizationObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AuthorizationObjectId;
		
		private string _AuthorizationObjectGroupId;
		
		private string _FieldList;
		
		private EntitySet<AUTH_Authorization> _AUTH_Authorizations;
		
		private EntityRef<AUTH_AuthorizationGroup> _AUTH_AuthorizationGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationObjectIdChanging(string value);
    partial void OnAuthorizationObjectIdChanged();
    partial void OnAuthorizationObjectGroupIdChanging(string value);
    partial void OnAuthorizationObjectGroupIdChanged();
    partial void OnFieldListChanging(string value);
    partial void OnFieldListChanged();
    #endregion
		
		public AUTH_AuthorizationObject()
		{
			this._AUTH_Authorizations = new EntitySet<AUTH_Authorization>(new Action<AUTH_Authorization>(this.attach_AUTH_Authorizations), new Action<AUTH_Authorization>(this.detach_AUTH_Authorizations));
			this._AUTH_AuthorizationGroup = default(EntityRef<AUTH_AuthorizationGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationObjectId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AuthorizationObjectId
		{
			get
			{
				return this._AuthorizationObjectId;
			}
			set
			{
				if ((this._AuthorizationObjectId != value))
				{
					this.OnAuthorizationObjectIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationObjectId = value;
					this.SendPropertyChanged("AuthorizationObjectId");
					this.OnAuthorizationObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationObjectGroupId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorizationObjectGroupId
		{
			get
			{
				return this._AuthorizationObjectGroupId;
			}
			set
			{
				if ((this._AuthorizationObjectGroupId != value))
				{
					if (this._AUTH_AuthorizationGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorizationObjectGroupIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationObjectGroupId = value;
					this.SendPropertyChanged("AuthorizationObjectGroupId");
					this.OnAuthorizationObjectGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldList", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FieldList
		{
			get
			{
				return this._FieldList;
			}
			set
			{
				if ((this._FieldList != value))
				{
					this.OnFieldListChanging(value);
					this.SendPropertyChanging();
					this._FieldList = value;
					this.SendPropertyChanged("FieldList");
					this.OnFieldListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_AuthorizationObject_AUTH_Authorization", Storage="_AUTH_Authorizations", ThisKey="AuthorizationObjectId", OtherKey="AuthorizationObjectId")]
		public EntitySet<AUTH_Authorization> AUTH_Authorizations
		{
			get
			{
				return this._AUTH_Authorizations;
			}
			set
			{
				this._AUTH_Authorizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_AuthorizationGroup_AUTH_AuthorizationObject", Storage="_AUTH_AuthorizationGroup", ThisKey="AuthorizationObjectGroupId", OtherKey="AuthorizationObjectGroupId", IsForeignKey=true)]
		public AUTH_AuthorizationGroup AUTH_AuthorizationGroup
		{
			get
			{
				return this._AUTH_AuthorizationGroup.Entity;
			}
			set
			{
				AUTH_AuthorizationGroup previousValue = this._AUTH_AuthorizationGroup.Entity;
				if (((previousValue != value) 
							|| (this._AUTH_AuthorizationGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTH_AuthorizationGroup.Entity = null;
						previousValue.AUTH_AuthorizationObjects.Remove(this);
					}
					this._AUTH_AuthorizationGroup.Entity = value;
					if ((value != null))
					{
						value.AUTH_AuthorizationObjects.Add(this);
						this._AuthorizationObjectGroupId = value.AuthorizationObjectGroupId;
					}
					else
					{
						this._AuthorizationObjectGroupId = default(string);
					}
					this.SendPropertyChanged("AUTH_AuthorizationGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AUTH_Authorizations(AUTH_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_AuthorizationObject = this;
		}
		
		private void detach_AUTH_Authorizations(AUTH_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_AuthorizationObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_Field")]
	public partial class AUTH_Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FieldId;
		
		private string _FieldValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIdChanging(string value);
    partial void OnFieldIdChanged();
    partial void OnFieldValuesChanging(string value);
    partial void OnFieldValuesChanged();
    #endregion
		
		public AUTH_Field()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldValues", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FieldValues
		{
			get
			{
				return this._FieldValues;
			}
			set
			{
				if ((this._FieldValues != value))
				{
					this.OnFieldValuesChanging(value);
					this.SendPropertyChanging();
					this._FieldValues = value;
					this.SendPropertyChanged("FieldValues");
					this.OnFieldValuesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_Profile")]
	public partial class AUTH_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProfileId;
		
		private string _Description;
		
		private EntitySet<AUTH_ProfilesContent> _AUTH_ProfilesContents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(string value);
    partial void OnProfileIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AUTH_Profile()
		{
			this._AUTH_ProfilesContents = new EntitySet<AUTH_ProfilesContent>(new Action<AUTH_ProfilesContent>(this.attach_AUTH_ProfilesContents), new Action<AUTH_ProfilesContent>(this.detach_AUTH_ProfilesContents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_Profile_AUTH_ProfilesContent", Storage="_AUTH_ProfilesContents", ThisKey="ProfileId", OtherKey="ProfileId")]
		public EntitySet<AUTH_ProfilesContent> AUTH_ProfilesContents
		{
			get
			{
				return this._AUTH_ProfilesContents;
			}
			set
			{
				this._AUTH_ProfilesContents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AUTH_ProfilesContents(AUTH_ProfilesContent entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_Profile = this;
		}
		
		private void detach_AUTH_ProfilesContents(AUTH_ProfilesContent entity)
		{
			this.SendPropertyChanging();
			entity.AUTH_Profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AUTH_ProfilesContent")]
	public partial class AUTH_ProfilesContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProfileId;
		
		private System.Guid _AuthorizationId;
		
		private EntityRef<AUTH_Authorization> _AUTH_Authorization;
		
		private EntityRef<AUTH_Profile> _AUTH_Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(string value);
    partial void OnProfileIdChanged();
    partial void OnAuthorizationIdChanging(System.Guid value);
    partial void OnAuthorizationIdChanged();
    #endregion
		
		public AUTH_ProfilesContent()
		{
			this._AUTH_Authorization = default(EntityRef<AUTH_Authorization>);
			this._AUTH_Profile = default(EntityRef<AUTH_Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._AUTH_Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					if (this._AUTH_Authorization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationId = value;
					this.SendPropertyChanged("AuthorizationId");
					this.OnAuthorizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_Authorization_AUTH_ProfilesContent", Storage="_AUTH_Authorization", ThisKey="AuthorizationId", OtherKey="AuthorizationId", IsForeignKey=true)]
		public AUTH_Authorization AUTH_Authorization
		{
			get
			{
				return this._AUTH_Authorization.Entity;
			}
			set
			{
				AUTH_Authorization previousValue = this._AUTH_Authorization.Entity;
				if (((previousValue != value) 
							|| (this._AUTH_Authorization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTH_Authorization.Entity = null;
						previousValue.AUTH_ProfilesContents.Remove(this);
					}
					this._AUTH_Authorization.Entity = value;
					if ((value != null))
					{
						value.AUTH_ProfilesContents.Add(this);
						this._AuthorizationId = value.AuthorizationId;
					}
					else
					{
						this._AuthorizationId = default(System.Guid);
					}
					this.SendPropertyChanged("AUTH_Authorization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AUTH_Profile_AUTH_ProfilesContent", Storage="_AUTH_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public AUTH_Profile AUTH_Profile
		{
			get
			{
				return this._AUTH_Profile.Entity;
			}
			set
			{
				AUTH_Profile previousValue = this._AUTH_Profile.Entity;
				if (((previousValue != value) 
							|| (this._AUTH_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AUTH_Profile.Entity = null;
						previousValue.AUTH_ProfilesContents.Remove(this);
					}
					this._AUTH_Profile.Entity = value;
					if ((value != null))
					{
						value.AUTH_ProfilesContents.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(string);
					}
					this.SendPropertyChanged("AUTH_Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
